#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import sys
import zmq
import time
# minnow comms
from minnow_comms.minnow_app_threaded import App
# flatbuffer serialization
import flatbuffers
# generated by flatc
import topics.nav.gps
# depth driver MS5837
from minnow_drivers.pyZOEM8 import pyZOEM8

class AppGPS(App):
    def __init__(self):
        super().__init__()
        self.builder = None
        self.msg = None
        self.gps_sensor = None

    def set_message_nav_gps(self):
        position_status = self.builder.CreateString(self.gps_sensor.position_status)
        mode = self.builder.CreateString(self.gps_sensor.mode)
        quality = self.builder.CreateString(self.gps_sensor.quality)

        topics.nav.gps.gpsStart(self.builder)
        topics.nav.gps.gpsAddTime(self.builder, time.time())
        topics.nav.gps.gpsAddStatus(self.builder, position_status)
        topics.nav.gps.gpsAddLongitude(self.builder, mode)
        topics.nav.gps.gpsAddLatitude(self.builder, quality)
        topics.nav.gps.gpsAddAltitude(self.builder, self.gps_sensor.altitude)
        topics.nav.gps.gpsAddUtc(self.builder, self.gps_sensor.utc)
        topics.nav.gps.gpsAddNumSatellites(self.builder, self.gps_sensor.num_satellites)
        topics.nav.gps.gpsAddSpeed(self.builder, self.gps_sensor.speed_over_ground)
        topics.nav.gps.gpsAddCourse(self.builder, self.gps_sensor.course_over_ground)
        topics.nav.gps.gpsAddHdop(self.builder, self.gps_sensor.horizontal_dilution)
        topics.nav.gps.gpsAddMagDeclination(self.builder, self.gps_sensor.magnetic_declination)

        print('Quality: {}'.format(self.gps_sensor.quality))
        print('UTC: {:10.3f} s'.format(self.gps_sensor.utc))
        print('Latitude: {:6.5f} deg'.format(self.gps_sensor.latitude))
        print('Longitude: {:6.5f} deg'.format(self.gps_sensor.longitude))
        print('Magnetic Declination: {:6.5f} deg'.format(self.gps_sensor.magnetic_declination))
        print('')

        gps_msg = topics.nav.gps.gpsEnd(self.builder)
        self.builder.Finish(gps_msg)
        self.msg = self.builder.Output()

    def init(self):
        tick = self.get_config_parameter(int, "tick")
        self.set_hz(tick)

        self.gps_sensor = pyZOEM8.ZOEM8(2)

        self.builder = flatbuffers.Builder(1024)

    def process(self):
        self.gps_sensor.read()
        self.set_message_nav_gps()
        self.publish('nav.gps', self.msg)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Expected a YAML configuration file... Exiting.")
        sys.exit()
    else:
        config_file = sys.argv[1]
    app_gps = AppGPS()
    app_gps.set_name("app_gps")
    app_gps.set_config(config_file)
    app_gps.run()
