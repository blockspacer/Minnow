// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NAVTOPIC2_TOPICS_NAV_H_
#define FLATBUFFERS_GENERATED_NAVTOPIC2_TOPICS_NAV_H_

#include "flatbuffers/flatbuffers.h"

namespace topics {
namespace nav {

struct topic2;

struct topic2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_TEST = 6
  };
  double time() const {
    return GetField<double>(VT_TIME, 0.0);
  }
  const flatbuffers::String *test() const {
    return GetPointer<const flatbuffers::String *>(VT_TEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_TIME) &&
           VerifyOffset(verifier, VT_TEST) &&
           verifier.VerifyString(test()) &&
           verifier.EndTable();
  }
};

struct topic2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(double time) {
    fbb_.AddElement<double>(topic2::VT_TIME, time, 0.0);
  }
  void add_test(flatbuffers::Offset<flatbuffers::String> test) {
    fbb_.AddOffset(topic2::VT_TEST, test);
  }
  explicit topic2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  topic2Builder &operator=(const topic2Builder &);
  flatbuffers::Offset<topic2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<topic2>(end);
    return o;
  }
};

inline flatbuffers::Offset<topic2> Createtopic2(
    flatbuffers::FlatBufferBuilder &_fbb,
    double time = 0.0,
    flatbuffers::Offset<flatbuffers::String> test = 0) {
  topic2Builder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_test(test);
  return builder_.Finish();
}

inline flatbuffers::Offset<topic2> Createtopic2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    double time = 0.0,
    const char *test = nullptr) {
  auto test__ = test ? _fbb.CreateString(test) : 0;
  return topics::nav::Createtopic2(
      _fbb,
      time,
      test__);
}

inline const topics::nav::topic2 *Gettopic2(const void *buf) {
  return flatbuffers::GetRoot<topics::nav::topic2>(buf);
}

inline const topics::nav::topic2 *GetSizePrefixedtopic2(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<topics::nav::topic2>(buf);
}

inline bool Verifytopic2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<topics::nav::topic2>(nullptr);
}

inline bool VerifySizePrefixedtopic2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<topics::nav::topic2>(nullptr);
}

inline void Finishtopic2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<topics::nav::topic2> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtopic2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<topics::nav::topic2> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace nav
}  // namespace topics

#endif  // FLATBUFFERS_GENERATED_NAVTOPIC2_TOPICS_NAV_H_
